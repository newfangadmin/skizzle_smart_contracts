pragma solidity ^0.5;

import './SafeMath.sol';

contract NewfangDIDRegistry {
    using SafeMath for uint;
    bytes32 public log;

    // keccak256(storage index) => bytes32 newfang-specific-idstring
    mapping(bytes32 => bytes32) public owners; // file owners
    // file id => access type => user => access control key
    mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => ACK))) public accessSpecifier;
    mapping(bytes32 => mapping(bytes32 => bytes32[])) public userAccess;
    mapping(bytes32 => uint) public nonce;
    mapping(bytes32 => File) public files;
    mapping(bytes32 => Access) accessTypes;
    address public owner;

    struct Access {
        bytes32[] types;
        mapping(bytes32 => bool) is_in;
    }

    struct File {
        uint256 n;
        uint256 k;
        uint256 file_size;
        string ueb;
    }

    struct ACK {// Access Control Key
        uint256 _type; // type of access email or public key
        uint256 validity;
    }

    constructor () public {
        owner = msg.sender;
    }

    modifier onlyFileOwner(bytes32 _file, bytes32 _identity) {
        require(_identity == owners[_file]);
        _;
    }



    function compareStrings(string memory a, string memory b) internal pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }


    function hash(address _addr) public pure returns (bytes32) {
        return keccak256(abi.encode(_addr));
    }

    function getSigner(bytes32 payloadHash, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public pure returns (address){
        bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", payloadHash));
        address actualSigner = ecrecover(messageHash, v, r, s);
        require(signer == keccak256(abi.encode(actualSigner)));
        return actualSigner;
    }


    /**
    * @dev This function will be used by createDID pubic function and createDIDSigned
    * @return bool
    */
    function createDID(bytes32 _id, bytes32 _identity) internal returns (bool){
        require(owners[_id] == bytes32(0), "Owner already exist for this file");
        owners[_id] = _identity;
        nonce[_identity]++;
        return true;
    }

    /**
    * @dev _id will be the file index which is generated by newfang SDK on client side.
    * @return bool
    */
    function createDID(bytes32 _id) public returns (bool){
        return createDID(_id, keccak256(abi.encode(msg.sender)));
    }

    function createDIDSigned(bytes32 _id, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool) {
        bytes32 payloadHash = keccak256(abi.encode(_id, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return createDID(_id, keccak256(abi.encode(actualSigner)));
    }


    function removeDID(bytes32 _id, bytes32 _identity) internal returns (bool) {
        require(owners[_id] == _identity, "Owner does not match");

        // Remove access of all the users
        bytes32[] memory users;
        bytes32 user;
        for (uint at = 0; at < accessTypes[_id].types.length; at++) {
            users = userAccess[_id][accessTypes[_id].types[at]];
            for (uint i = 0; i < users.length; i++) {
                user = userAccess[_id][accessTypes[_id].types[at]][i];
                delete accessSpecifier[_id][accessTypes[_id].types[at]][user];
            }
        }

        // Remove file owner
        delete owners[_id];
        return true;
    }

    function removeDID(bytes32 _id) public returns (bool){
        return removeDID(_id, keccak256(abi.encode(msg.sender)));
    }

    function removeDIDSigned(bytes32 _id, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool) {
        bytes32 payloadHash = keccak256(abi.encode(_id, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return removeDID(_id, keccak256(abi.encode(actualSigner)));
    }


    function getTotalUsers(bytes32 _file, bytes32 _access_type) public view returns (uint256){
        return userAccess[_file][_access_type].length;
    }

    function getAllUsers(bytes32 _file, bytes32 _access_type) public view returns (bytes32[] memory){
        bytes32[] memory users = userAccess[_file][_access_type];
        bytes32 user;
        for (uint i = 0; i < users.length; i++) {
            user = userAccess[_file][_access_type][i];
            if (accessSpecifier[_file][_access_type][user].validity <= now) {
                delete users[i];
            }
        }
        return users;
    }


    /**
    * @dev key is encrypted with users public key and stored on a server hash of encrypted key is stored here in smart
     contract along with its validity
    * @return bool
    */
    function share(bytes32 _identity, bytes32[] memory _files, uint256[] memory _type, bytes32[] memory _user, bytes32[] memory _access_type, uint256[] memory _validity) internal returns (bool){

        for (uint j = 0; j < _files.length; j++) {
            for (uint i = 0; i < _type.length; i++) {
                require(_identity == owners[_files[j]]);
                require(_validity[i] != 0, "Validity must be non zero");
                //                ACK memory ack = accessSpecifier[_files[j]][_access_type[i]][_user[i]];
                //                require(ack.validity == 0, "Already shared with user");
                accessSpecifier[_files[j]][_access_type[i]][_user[i]] = ACK(_type[i], now.add(_validity[i]));
                userAccess[_files[j]][_access_type[i]].push(_user[i]);
            }
        }

        nonce[_identity]++;
        return true;
    }

    function share(bytes32[] memory _file, uint256[] memory _type, bytes32[] memory _user, bytes32[] memory _access_type, uint256[] memory _validity) public returns (bool){
        return share(keccak256(abi.encode(msg.sender)), _file, _type, _user, _access_type, _validity);
    }


    function shareSigned(bytes32[] memory _file, uint256[] memory _type, bytes32[] memory _user, bytes32[] memory _access_type, uint256[] memory _validity, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool) {
        bytes32 payloadHash = keccak256(abi.encode(_file, _type, _user, _access_type, _validity, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return share(keccak256(abi.encode(actualSigner)), _file, _type, _user, _access_type, _validity);
    }

    function fileUpdate(bytes32 _identity, bytes32 _file, uint256 n, uint256 k, uint256 file_size, string memory ueb) internal onlyFileOwner(_file, _identity) returns (bool){
        require(owners[_file] != bytes32(0), "File does not has an owner");
        require(n > k, "n>k");
        require(file_size != 0, "Should not be 0");
        files[_file] = File(n, k, file_size, ueb);
        return true;
    }

    function fileUpdate(bytes32 _file, uint256 n, uint256 k, uint256 file_size, string memory ueb) public returns (bool){
        return fileUpdate(keccak256(abi.encode(msg.sender)), _file, n, k, file_size, ueb);
    }

    function fileUpdateSigned(bytes32 _file, uint256 n, uint256 k, uint256 file_size, string memory ueb, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool){
        bytes32 payloadHash = keccak256(abi.encode(_file, n, k, file_size, ueb, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return fileUpdate(keccak256(abi.encode(actualSigner)), _file, n, k, file_size, ueb);
    }

    event KeyHash(
        uint256 _type,
        uint256 validity
    );

    function getKeyHash(bytes32 _identity, bytes32 _file, bytes32 _access_type) internal returns (uint256, uint256){
        ACK memory ack = accessSpecifier[_file][_access_type][_identity];
        nonce[_identity]++;
        emit KeyHash(ack._type, ack.validity);
        return (ack._type, ack.validity);
    }


    /**
    * @dev Fetch ACK hash of user
    * @return encrypted hash and validity
    */
    function getKeyHash(bytes32 _file, bytes32 _access_type) public returns (uint256, uint256){
        return getKeyHash(hash(msg.sender), _file, _access_type);
    }

    function getKeyHashSigned(bytes32 _file, bytes32 _access_type, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (uint256, uint256) {
        bytes32 payloadHash = keccak256(abi.encode(_file, _access_type, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return getKeyHash(hash(actualSigner), _file, _access_type);
    }


    function IndexOf(bytes32[] memory values, bytes32 value) internal pure returns (uint) {
        uint i = 0;
        while (values[i] != value) {
            i++;
        }
        return i;
    }

    /**
    * @dev Update ACK hash or its validity
    * @return bool
    */
    function updateACK(bytes32 _identity, bytes32 _file, uint256 _type, bytes32 _user, bytes32 _access_type, uint256 _validity) internal onlyFileOwner(_file, _identity) returns (bool){
        accessSpecifier[_file][_access_type][_user] = ACK(_type, now.add(_validity));
        if (_validity == 0) {
            delete accessSpecifier[_file][_access_type][_user];
            uint index = IndexOf(userAccess[_file][_access_type], _user);
            delete userAccess[_file][_access_type][index];
        }
        if (!accessTypes[_file].is_in[_access_type]) {
            accessTypes[_file].types.push(_access_type);
            accessTypes[_file].is_in[_access_type] = true;
        }
        nonce[_identity]++;
        return true;
    }

    function updateACK(bytes32 _file, uint256 _type, bytes32 _user, bytes32 _access_type, uint256 _validity) public returns (bool){
        return updateACK(hash(msg.sender), _file, _type, _user, _access_type, _validity);
    }

    function updateACKSigned(bytes32 _file, uint256 _type, bytes32 _user, bytes32 _access_type, uint256 _validity, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool) {
        bytes32 payloadHash = keccak256(abi.encode(_file, _type, _user, _access_type, _validity, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return updateACK(hash(actualSigner), _file, _type, _user, _access_type, _validity);
    }



    /**
    * @dev Change file Owner
    * @return bool
    */
    function changeFileOwner(bytes32 _identity, bytes32 _file, bytes32 _new_owner) internal onlyFileOwner(_file, _identity) returns (bool){
        require(_new_owner != bytes32(0), "Invalid address");
        owners[_file] = _new_owner;
        nonce[_identity]++;
        return true;
    }

    function changeFileOwner(bytes32 _file, bytes32 _new_owner) public returns (bool){
        return changeFileOwner(hash(msg.sender), _file, _new_owner);
    }

    function changeOwnerSigned(bytes32 _file, bytes32 _new_owner, bytes32 signer, uint8 v, bytes32 r, bytes32 s) public returns (bool) {
        bytes32 payloadHash = keccak256(abi.encode(_file, _new_owner, nonce[signer]));
        address actualSigner = getSigner(payloadHash, signer, v, r, s);
        return changeFileOwner(hash(actualSigner), _file, _new_owner);
    }
}
